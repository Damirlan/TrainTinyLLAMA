import torch
from transformers import LlamaTokenizer, LlamaForCausalLM

# –ü—É—Ç—å –∫ –¥–æ–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
MODEL_PATH = "./tinyllama-finetuned"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∏ –º–æ–¥–µ–ª—å
print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä...")
tokenizer = LlamaTokenizer.from_pretrained(MODEL_PATH)


model = LlamaForCausalLM.from_pretrained(
    MODEL_PATH,
    torch_dtype=torch.float32  # ‚úÖ –ë–µ–∑ fp16
).to("cpu")  # ‚úÖ –±–µ–∑ CUDA

model.eval()

# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
examples = [
    {
        "rating": 5,
        "product_name": "–ø—É—Ö–æ–≤–∏–∫",
        "review_text": "–û—á–µ–Ω—å —Ç—ë–ø–ª—ã–π –∏ –ª—ë–≥–∫–∏–π. –î–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É—é!"
    },
    {
        "rating": 2,
        "product_name": "—á–∞—Å—ã",
        "review_text": "–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å. –û—á–µ–Ω—å —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω."
    },
    {
        "rating": 4,
        "product_name": "–Ω–∞—É—à–Ω–∏–∫–∏",
        "review_text": "–ó–≤—É–∫ —Ö–æ—Ä–æ—à–∏–π, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ –¥–∞–≤—è—Ç –Ω–∞ —É—à–∏ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏."
    }
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
def generate_reply(example):
    prompt = (
        f"–†–µ–π—Ç–∏–Ω–≥: {example['rating']}\n"
        f"–¢–æ–≤–∞—Ä: {example['product_name']}\n"
        f"–û—Ç–∑—ã–≤: {example['review_text']}\n"
        "–û—Ç–≤–µ—Ç:"
    )

    inputs = tokenizer(prompt, return_tensors="pt").to(model.device)

    with torch.no_grad():
        output = model.generate(
            **inputs,
            max_new_tokens=100,
            do_sample=True,
            temperature=0.8,
            top_p=0.9,
            eos_token_id=tokenizer.eos_token_id
        )

    generated = tokenizer.decode(output[0], skip_special_tokens=True)
    return generated[len(prompt):].strip()  # —É–±–∏—Ä–∞–µ–º prompt –∏–∑ –Ω–∞—á–∞–ª–∞

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n" + "-"*50)
for i, ex in enumerate(examples, 1):
    reply = generate_reply(ex)
    print(f"[–ü—Ä–∏–º–µ—Ä {i}]")
    print(f"üõí –¢–æ–≤–∞—Ä: {ex['product_name']}")
    print(f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {ex['rating']}")
    print(f"üìù –û—Ç–∑—ã–≤: {ex['review_text']}")
    print(f"ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {reply}\n" + "-"*50)

